{"version":3,"sources":["components/ContactForm/ContactForm.styled.jsx","components/ContactForm/ContactForm.jsx","components/Filter/Filter.styled.jsx","components/Filter/Filter.jsx","components/Contacts/ContactListItem/ContactListItem.styled.jsx","components/Contacts/ContactListItem/ContactListItem.jsx","components/Contacts/ContactList/ContactList.styled.jsx","components/Contacts/ContactList/ContactList.jsx","App.styled.js","App.js","index.js"],"names":["Form","styled","form","Label","label","ContactForm","state","name","number","handleChange","e","target","value","setState","handleSubmit","preventDefault","props","addContact","reset","onSubmit","this","onChange","autoComplete","type","pattern","title","required","Component","Input","input","Filter","filterBlur","filterChange","filter","onBlur","Item","li","ContactListItem","id","onDeleteContact","onClick","List","ul","ContactList","list","map","item","Container","div","App","contacts","contact","uuidv4","isAdded","forEach","alert","prevState","deleteContact","contactId","getFilteredContacts","normalizedFilter","toLowerCase","includes","parsedContacts","JSON","parse","localStorage","getItem","prevProps","setItem","stringify","filteredContacts","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.ffd0cc36.chunk.js","sourcesContent":["import styled from \"@emotion/styled\";\n\nexport const Form = styled.form`\n  width: 350px;\n  padding: 5px;\n  border: 2px solid black;\n`;\n\nexport const Label = styled.label`\n  display: flex;\n  flex-direction: column;\n  width: 60%;\n  margin-bottom: 10px;\n  font-size: 20px;\n`;\n","import React, { Component } from \"react\";\nimport PropTypes from \"prop-types\";\nimport { Form, Label } from \"./ContactForm.styled\";\n\nclass ContactForm extends Component {\n  state = { name: \"\", number: \"\" };\n\n  handleChange = (e) => {\n    const { name, value } = e.target;\n    this.setState({ [name]: value });\n  };\n\n  handleSubmit = (e) => {\n    e.preventDefault();\n\n    this.props.addContact(this.state);\n    this.reset();\n  };\n\n  reset = () => {\n    this.setState({ name: \"\", number: \"\" });\n  };\n\n  render() {\n    return (\n      <Form onSubmit={this.handleSubmit}>\n        <Label>\n          Name\n          <input\n            value={this.state.name}\n            onChange={this.handleChange}\n            autoComplete=\"off\"\n            type=\"text\"\n            name=\"name\"\n            pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n            title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\n            required\n          />\n        </Label>\n\n        <Label>\n          Number\n          <input\n            value={this.state.number}\n            onChange={this.handleChange}\n            autoComplete=\"off\"\n            type=\"tel\"\n            name=\"number\"\n            pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n            title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\n            required\n          />\n        </Label>\n\n        <button type=\"submit\">Add contact</button>\n      </Form>\n    );\n  }\n}\n\nContactForm.propTypes = {\n  addContact: PropTypes.func,\n};\n\nexport default ContactForm;\n","import styled from \"@emotion/styled\";\n\nexport const Label = styled.label`\n  margin-bottom: 10px;\n  font-size: 20px;\n`;\n\nexport const Input = styled.input`\n  margin-left: 5px;\n`;\n","import PropTypes from \"prop-types\";\nimport { Label, Input } from \"./Filter.styled\";\n\nfunction Filter({ filterBlur, filterChange, filter }) {\n  return (\n    <Label>\n      Find contacts by name:\n      <Input value={filter} onChange={filterChange} onBlur={filterBlur} />\n    </Label>\n  );\n}\n\nFilter.propTypes = {\n  filterChange: PropTypes.func,\n  filter: PropTypes.string.isRequired,\n};\n\nexport default Filter;\n","import styled from \"@emotion/styled\";\n\nexport const Item = styled.li`\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  margin-bottom: 10px;\n  padding: 5px;\n  width: 450px;\n  font-size: 20px;\n  border: 2px solid tomato;\n  border-radius: 5px;\n  box-shadow: 0px 2px 3px 3px rgba(34, 60, 80, 0.4);\n`;\n","import PropTypes from \"prop-types\";\nimport { Item } from \"./ContactListItem.styled\";\n\nfunction ContactListItem({ id, name, number, onDeleteContact }) {\n  return (\n    <Item>\n      {name}: {number}\n      <button type=\"button\" onClick={() => onDeleteContact(id)}>\n        Delete\n      </button>\n    </Item>\n  );\n}\n\nContactListItem.propTypes = {\n  id: PropTypes.string.isRequired,\n  name: PropTypes.string.isRequired,\n  number: PropTypes.string.isRequired,\n  onDeleteContact: PropTypes.func,\n};\n\nexport default ContactListItem;\n","import styled from \"@emotion/styled\";\nexport const List = styled.ul`\n  list-style: none;\n  padding: 0;\n`;\n","import PropTypes from \"prop-types\";\nimport ContactListItem from \"components/Contacts/ContactListItem/\";\nimport { List } from \"./ContactList.styled\";\n\nfunction ContactList({ list, onDeleteContact }) {\n  return (\n    <List>\n      {list.map((item) => {\n        const { id, name, number } = item;\n\n        return (\n          <ContactListItem\n            key={id}\n            id={id}\n            name={name}\n            number={number}\n            onDeleteContact={onDeleteContact}\n          />\n        );\n      })}\n    </List>\n  );\n}\n\nContactList.propTypes = {\n  onDeleteContact: PropTypes.func,\n  list: PropTypes.arrayOf(PropTypes.shape).isRequired,\n};\n\nexport default ContactList;\n","import styled from \"@emotion/styled\";\nexport const Container = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n`;\n","import { v4 as uuidv4 } from \"uuid\";\nimport React, { Component } from \"react\";\nimport ContactForm from \"components/ContactForm\";\nimport Filter from \"components/Filter\";\nimport ContactList from \"components/Contacts/ContactList\";\nimport { Container } from \"./App.styled\";\n\nclass App extends Component {\n  state = {\n    contacts: [],\n    filter: \"\",\n  };\n\n  addContact = ({ name, number }) => {\n    const contact = { id: uuidv4(), name, number };\n\n    let isAdded = false;\n\n    this.state.contacts.forEach((contact) => {\n      if (contact.name === name) {\n        isAdded = true;\n        return;\n      }\n    });\n\n    if (isAdded) {\n      alert(`${name} is already in contacts`);\n      return;\n    }\n\n    this.setState((prevState) => ({\n      contacts: [...prevState.contacts, contact],\n    }));\n  };\n\n  deleteContact = (contactId) => {\n    this.setState((prevState) => ({\n      contacts: prevState.contacts.filter(\n        (contact) => contact.id !== contactId\n      ),\n    }));\n  };\n\n  filterChange = (e) => {\n    const { value } = e.target;\n    this.setState({ filter: value });\n  };\n\n  filterBlur = (e) => {\n    this.setState({ filter: \"\" });\n  };\n\n  getFilteredContacts = () => {\n    const { filter, contacts } = this.state;\n\n    const normalizedFilter = filter.toLowerCase();\n\n    return contacts.filter((contact) =>\n      contact.name.toLowerCase().includes(normalizedFilter)\n    );\n  };\n\n  componentDidMount() {\n    const parsedContacts = JSON.parse(localStorage.getItem(\"contacts\"));\n    if (parsedContacts) {\n      this.setState({ contacts: parsedContacts });\n    }\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    if (this.state.contacts !== prevState.contacts) {\n      localStorage.setItem(\"contacts\", JSON.stringify(this.state.contacts));\n    }\n  }\n\n  render() {\n    const { filter } = this.state;\n\n    const filteredContacts = this.getFilteredContacts();\n\n    return (\n      <Container>\n        <h1>Phonebook</h1>\n        <ContactForm addContact={this.addContact} />\n\n        <h2>Contacts</h2>\n        <Filter\n          filterBlur={this.filterBlur}\n          filterChange={this.filterChange}\n          filter={filter}\n        />\n        <ContactList\n          list={filteredContacts}\n          onDeleteContact={this.deleteContact}\n        />\n      </Container>\n    );\n  }\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}